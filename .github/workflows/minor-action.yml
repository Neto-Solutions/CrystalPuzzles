name: Deploy by ssh

on:
  push:
    branches:
      - prod
      - release

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3 

      - name: Set up Python 3.11
        uses: actions/setup-python@v4  
        with:
          python-version: 3.11          

      - name: Install pipenv
        run: pip install pipenv
        
      - name: Install dependencies
        run: cd backend && pipenv install

      - name: Install pytest
        run: cd backend && pipenv install pytest && pipenv install httpx
        
      - name: Copy env
        run: cp .env backend/.env

      - name: Run tests
        run: cd backend && ls && PYTHONPATH=$(pwd) pipenv run pytest
          
  app_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository from specific branch
        uses: actions/checkout@v3
        with:
          ref: test 
      - name: find_docker_compose
        run: |
          result=$(find $GITHUB_WORKSPACE -name "docker-compose.prod.yml")
          if [ -z "$result" ]; then
            echo "docker-compose.yml not found"
            exit 1  # Завершить выполнение
          else
            directory=$(dirname "$result")
            echo "Found docker-compose.yml at: $result"
          fi
          
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose 
      - name: Build and Start Docker Compose
        run: docker compose up -d 
      - name: Check Services list
        run: docker-compose ps
      - name: Check api
        run: nc -z "127.0.0.1" "8001" && echo "api is available" || exit 1
      - name: Check postgres
        run: nc -z "127.0.0.1" "5432" && echo "postgres is available" || exit 1
      - name: Check front
        run: nc -z "127.0.0.1" "8080" && echo "front is available" || exit 1
      - name: Check redis
        run: nc -z "127.0.0.1" "6379" && echo "redis is available" || exit 1      
        
      - name: Shut Down Docker Compose
        if: always() 
        run: docker compose down  

  update_tag:
    runs-on: ubuntu-latest
    needs: [pytest, app_tests]
    steps:
      - uses: actions/checkout@v2

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: minor

      - uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ steps.bump-semver.outputs.new_version }}
          message: '${{ steps.bump-semver.outputs.new_version }}: PR #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}'
      - name: output-new-tag
        run: |
          echo "NEW_TAG=${{ steps.bump-semver.outputs.new_version }}" >> $GITHUB_ENV
          echo "New tag: ${{ steps.bump-semver.outputs.new_version }}"
          # echo "::set-output name=new_tag::${{ steps.bump-semver.outputs.new_version }}"
          echo "::set-output name=new_tag::$NEW_TAG"
          
  refresh_content:   
    runs-on: ubuntu-latest
    needs: [pytest, app_tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set nginx log files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_NAME }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            sudo mkdir /var/log/nginx 2>/dev/null
            sudo touch /var/log/nginx/error.log 2>/dev/null
            sudo touch /var/log/nginx/access.log 2>/dev/null
            ls -la /var/log/nginx
        
      - name: Change directory permitions
        uses: ./.github/workflows/change-directory-permissions
        with:
          host: ${{ secrets.SSH_HOST_NAME }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}              
            
      - name: Refresh content
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      - name: Sync Repository via SSH
        run: |
          rsync -e "ssh -i $HOME/.ssh/key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }}" --archive --compress --delete \
          . ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST_NAME }}:Crystall

      - name: Change directory permitions again
        uses: ./.github/workflows/change-directory-permissions
        with:
          host: ${{ secrets.SSH_HOST_NAME }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}

  check_docker_and_compose:
    needs: refresh_content
    runs-on: ubuntu-latest
    steps:
      - name: Check docker and docker-compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_NAME }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
             /home/${{ secrets.SSH_USERNAME }}/Crystall/devops/check_docker.sh || \
             /home/${{ secrets.SSH_USERNAME }}/Crystall/devops/install_docker_docker-compose.sh ||
              echo "Did not check Docker"

  clean_docker_conteiners_and_images:
    needs: check_docker_and_compose
    runs-on: ubuntu-latest
    steps:
      - name: Stop docker conteiners and clean docker images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_NAME }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            sudo docker stop $(docker ps -aq) && \
            sudo docker rm $(docker ps -aq) && \
            sudo docker system prune --all --force \
            || echo "No docker conteiners are running"

  make_env_file:
    # needs: clean_docker_conteiners_and_images
    needs: [update_tag, refresh_content]
    runs-on: ubuntu-latest
    env:
      ENV_File: "/home/${{ secrets.SSH_USERNAME }}/Crystall/.env"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        
      - name: Copy .env to server
        uses: appleboy/ssh-action@master        
        with:
          host: ${{ secrets.SSH_HOST_NAME }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            LATEST_TAG=${{ steps.get-latest-tag.outputs.tag }}
            echo "Latest tag: $LATEST_TAG"
            echo "ENV_File = ${{ env.ENV_File }}"
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > ${{ env.ENV_File }}
            echo "REFRESH_SECRET_KEY=${{ secrets.REFRESH_SECRET_KEY }}" >> ${{ env.ENV_File }}
            echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> ${{ env.ENV_File }}
            echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> ${{ env.ENV_File }}
            echo "REFRESH_TOKEN_EXPIRE_MINUTES=${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}" >> ${{ env.ENV_File }}
            echo "PG_DATABASE=${{ secrets.PG_DATABASE }}" >> ${{ env.ENV_File }}
            echo "PG_USER=${{ secrets.PG_USER }}" >> ${{ env.ENV_File }}
            echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> ${{ env.ENV_File }}
            echo "PG_HOST=${{ secrets.PG_HOST }}" >> ${{ env.ENV_File }}
            echo "PG_PORT=5432" >> ${{ env.ENV_File }}
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> ${{ env.ENV_File }}
            echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> ${{ env.ENV_File }}
            echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> ${{ env.ENV_File }}
            echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> ${{ env.ENV_File }}
            echo "BASE_PATH=${{ secrets.BASE_PATH }}" >> ${{ env.ENV_File }}
            echo "PAGE_SIZE=${{ secrets.PAGE_SIZE }}" >> ${{ env.ENV_File }}
            echo "PORT=${{ secrets.PORT }}" >> ${{ env.ENV_File }}
            echo "REACT_APP_TAG=$LATEST_TAG" >> ${{ env.ENV_File }}
            echo "REACT_APP_SERVER_API=http://${{ secrets.SSH_HOST_NAME }}/api/v1/" >> ${{ env.ENV_File }}
            echo "TAG=$LATEST_TAG" >> ${{ env.ENV_File }}        

  start_docker:
    needs: 
      [make_env_file, clean_docker_conteiners_and_images]
    runs-on: ubuntu-latest
    steps:
      - name: Start docker compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_NAME }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            sudo docker compose -f /home/${{ secrets.SSH_USERNAME }}/Crystall/docker-compose.prod.yml up -d
          command_timeout: 30m

  
