version: "3.8"

services:
  db:
    container_name: ${PG_HOST}
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_PORT: ${PG_HOST}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata:Z crystal
    healthcheck:
      test: pg_isready -U ${PG_USER} -d ${PG_DATABASE}
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    ports:
      - ${PG_PORT}:5432
    networks:
      - backend

  redis:
    container_name: redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - 6379:6379
    networks:
      - backend

  api:
    container_name: api
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - .env
    command: sh -c "cd /backend && uvicorn main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    volumes:
      - static:/app/static
    depends_on:
      - db
      - redis
    restart: always
    ports:
      - 8001:8000
    networks:
      - backend
      - frontend

  front:
    container_name: front
    build: ./frontend/
    env_file:
      - .env
    depends_on:
      - api
    restart: always
    ports:
      - 8080:3000
    networks:
      - frontend
  
  nginx:
    build:
      context: ./nginx  
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro 
      - /var/log/nginx/access.log:/var/log/nginx/access.log
      - /etc/letsencrypt/archive/crystalpuzzles.pt/fullchain1.pem:/etc/letsencrypt/live/crystalpuzzles.pt/fullchain.pem:ro
      - /etc/letsencrypt/archive/crystalpuzzles.pt/privkey1.pem:/etc/letsencrypt/live/crystalpuzzles.pt/privkey.pem:ro
    depends_on:
      - api
      - front
    restart: always
    networks:
      - frontend
      - backend

networks:
  backend:
    driver: bridge

  frontend:
    driver: bridge

volumes:
  pgdata:
    driver: local
  static:
    driver: local
